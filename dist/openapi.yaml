openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Auth
  description: All authentication related routes
- name: Users
  description: All the user's personal app info
- name: Recipes
  description: All reciepes general info
paths:
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: User details to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "409":
          description: User name already taken
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: data about the user's favorites recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reciepeId:
                  type: string
                  description: reciepe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite
        "401":
          description: user is not authorized
        "404":
          description: recipeId does not exists
      security:
      - cookieAuth: []
  /users/my-recipes:
    get:
      tags:
      - Users
      summary: Return the recipes that were created by user
      description: Get an array of recipes that were created by a specific user
      responses:
        "200":
          description: data about the user's my recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the my recipes list of a user
      description: save recipe in the my recipes list of a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeAdd'
        required: true              
      responses:
        "201":
          description: The Recipe successfully saved into my recipes list
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/family-recipes:
    get:
      tags:
      - Users
      summary: Return the user's family recipes
      description: Get an array of recipes that are family recipes of specific user
      responses:
        "200":
          description: data about the user's family recipes returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FamilyRecipe'
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []

  /recipes:
    get:
      tags:
      - Recipes
      summary: Get random recipes, main page of the website
      responses:
        '200':
          description: Successful retrieval of random recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        '500':
          description: Internal server error

  /recipes/watched:
    post:
      tags:
      - Recipes
      summary: Add a recipe to the watched list of the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  description: ID of the recipe

      responses:
        '200':
          description: Successful added recipe to watched list of the user
        '500':
          description: Internal server error
    get:
      tags:
      - Recipes
      summary: Get the three most recently watched recipes by a specific user
      parameters:
        - name: userId
          in: query
          description: ID of the user
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved the three most recently watched recipes
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipeIds:
                    type: array
                    items:
                      type: integer
                    minItems: 0
                    maxItems: 3
                    description: Array of three recipe IDs
        '500':
          description: Internal server error



  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview details on recipe by his ID
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeFullDetails'
        "404":
          description: recipeId does not exists
  /recipes/search:
    get:
      tags:
      - Recipes
      summary: Search for recipes
      parameters:
        - name: query
          in: query
          description: The (natural language) recipe search query.
          required: true
          schema:
            type: string
        - name: cuisine
          in: query
          description: The cuisine of the recipes. One or more, comma-separated (will be interpreted as 'OR').
          schema:
            type: string
        - name: diet
          in: query
          description: The diet(s) for which the recipes must be suitable.
          schema:
            type: string
        - name: intolerances
          in: query
          description: A comma-separated list of intolerances.
          schema:
            type: string
        - name: number
          in: query
          description: Number of search results to show
          schema:
            type: integer
      responses:
        '200':
          description: Successful search response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        '400':
          description: Invalid request parameters for the search
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
        # image-url:
        #   pattern: URL
        #   type: string
        #   description: URL for the user's image
        #   example: https://cloudinary.com/
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    RecipePreview:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    RecipeFullDetails:
      type: object
      properties:
        id:
          type: integer
          description: recipe identifier
          example: 102
        title:
          type: string
          description: recipe name
          example: Simple Macaroni and Cheese
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 45
        popularity:
          type: integer
          description: how many likes got this recipe
          example: 5987
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
        servings:
          type: integer
          description: Number of servings for this recipe
          example: 4
        ingredients: 
          type: string
          description: List of all the ingredients and quantities needed for the recipe
          example: 1 pack of pasta, 3 slices of cheese, 5 tomatoes
        instructions: 
          type: string
          description: List of all the instruction needed for the recipe
          example: cut the tomatoes, put the cheese on them, and insert into the oven

    RecipeAdd:
      type: object
      properties:
        title:
          type: string
          description: recipe name
          example: Tasty Pizza with camels
        image:
          type: string
          description: recipe image
          format: URL
          example: https://spoonacular.com/recipeimages/655455-566x370.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 32
        vegetarian:
          type: boolean
          description: indication if the recipe is vegetarian
          example: true
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        glutenFree:
          type: boolean
          description: indication if the recipe is gluten free
          example: false
    FamilyRecipe: 
      type: object
      properties: 
        title:
          type: string
          description: recipe name
          example: Sam's Couscous
        image:
          type: string
          description: dish image
          format: URL
          example: https://assets.tmecosys.cn/image/upload/t_web767x639/img/recipe/ras/Assets/D3FE131E-EB10-46E8-9E93-5E178323751D/Derivates/A0B1EE28-94D2-4922-B871-CFB63832A281.jpg
        readyInMinutes:
          type: integer
          description: the time takes to make this recipe
          example: 32
        creator:
          type: string
          description: The name and family role of the recipe creator
          example : Uncle Sam
        ingredients :
          type: string 
          description: All the ingredients of the recipe
          example: Beef, coucous, tomato sauce 
        instructions:
          type: string
          description: All the instructions for the recipe
          example: 1.boil water, 2. add some salt and pepper
        when: 
        type: string
        description: When is it customary to prepare the dish
        example : Every Shavout eve meal. 
        
          
  
